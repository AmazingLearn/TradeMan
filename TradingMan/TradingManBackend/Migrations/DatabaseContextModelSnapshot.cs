// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingManBackend.DataLayer;

#nullable disable

namespace TradingManBackend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.AccountSettings", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlpacaApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlpacaSecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseTelegram")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.INotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<double>("BaseValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Fullfilled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BaseValue")
                        .HasColumnType("float");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<string>("ProductSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradingManBackend.Models.Messaging.TelegramChannel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("TelegramChannels");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.NotificationBasic", b =>
                {
                    b.HasBaseType("TradingManBackend.DataLayer.Models.INotification");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<double>("ExpectedChange")
                        .HasColumnType("float");

                    b.Property<int>("NotificationBasicType")
                        .HasColumnType("int");

                    b.ToTable("NotificationsBasic");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.NotificationTrend", b =>
                {
                    b.HasBaseType("TradingManBackend.DataLayer.Models.INotification");

                    b.Property<int>("Boundary")
                        .HasColumnType("int");

                    b.ToTable("NotificationsTrend");
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.NotificationBasic", b =>
                {
                    b.HasOne("TradingManBackend.DataLayer.Models.INotification", null)
                        .WithOne()
                        .HasForeignKey("TradingManBackend.DataLayer.Models.NotificationBasic", "NotificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingManBackend.DataLayer.Models.NotificationTrend", b =>
                {
                    b.HasOne("TradingManBackend.DataLayer.Models.INotification", null)
                        .WithOne()
                        .HasForeignKey("TradingManBackend.DataLayer.Models.NotificationTrend", "NotificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
